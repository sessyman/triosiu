var app = new Framework7({
    root: "#main-app",
    name: 'Sesiu',
    // App id
    id: 'ls.trio.test',
    routes: [
        {
            url: "assets/pages/signup.html",
            path: "/signup/",
            name: "signup",
            on: {
                pageInit: function (ev, pd) {
                    signup(ev, pd);
                }
            }
        }, {
            url: "assets/pages/login.html",
            path: "/",
            name: "login",
            on: {
                pageInit: function (ev, pd) {
                    login(ev, pd);
                }
            }
        }, {
            url: "assets/pages/groups.html",
            path: "/groups/",
            on: {
                pageInit: function (ev, pd) {
                    userGroups(ev, pd);
                    $("#main-nav").show(1);
                    userSettings(ev);
                }
            }
        }, {
            url: "assets/pages/notifications.html",
            path: "/notifications/",
            on: {
                pageInit: function (ev, pd) {
                    notifications(ev, pd);
                }
            }
        }, {
            url: "assets/pages/joins.html",
            path: "/joins/",
            on: {
                pageInit: function (ev, pd) {
                    joins(ev, pd);
                }
            }
        }, {
            url: "assets/pages/home.html",
            path: "/home/",
            on: {
                pageInit: function (ev, pd) {
                    home(ev, pd);
                    $(".navbar-inner .left a").show(1);
                    $(".navbar-inner .right").show(1);
                }
            }
        }, {
            url: "assets/pages/provider.html",
            path: "/provider/",
            on: {
                pageInit: function (ev, pd) {
                    provider(ev);
                    menuIcon(false);
                    title("Subscribe");
                },
                pageReinit:function(pd){
                    menuIcon(false);
                    title("Subscribe");
                }
            }
        }, {
            url: "assets/pages/pay-type.html",
            path: "/pay-type/:provider",
            name: "pay-type",
            on: {
                pageInit: function (ev, pd) {
                    payments(ev);
                    menuIcon(false);
                    title("Payment");
                },
                pageReinit:function(pd){
                    menuIcon(false);
                    title("Payment");
                }
            }
        }, {
            url: "assets/pages/pay-amount.html",
            path: "/pay-amount/:payType/:provider",
            on: {
                pageInit: function (ev, pd) {
                    payments(ev);
                    menuIcon(false);
                    title("Amount");
                },
                pageReinit:function(pd){
                    menuIcon(false);
                    title("Amount");
                }
            }
        }
    ]
});
//var $ = Dom7;

/*
 * Local Storage Constants
 */

/** session token; generated by server. token identifies ea user uniquely */
window.token = "token";
/** the phone number the user logged in with */
window.username = "username";
/** the user's first name */
window.fname = "name";
/** the user's last name */
window.lname = "surname";
/* the user's last login time; determined before it is updated. future versions will show login location */
window.lad = "lad";
/** a json array of groups the user belongs to, and their position in each. */
window.groups = "groups";
/** full names of the user [fname+" "+lname] */
window.names = "names";
/** the currently loaded group. this is the group JSON string */
window.currentGroup = "cgroup";
/** the html that represents notifications */
window.notes = "notifications";
/** the total number of notes this user has */
window.notesCount = "all-notes";
/** the total number of unread notes */
window.notesUnread = "unread-notes";

/*
 * Local Application Constants
 */
window.jsonError = "Problem connecting to the server. Please check your network";

window.mloader = null;

/**
 * Shows the wait dialog, to show to the user that something is happening in the
 * background.
 * 
 * @param {string} title the dialog title
 * @param {boolean} show whether to show or hide the dialog. If {@syntax true},
 * it will show the dialog, if otherwise, it will hide it. If state is not
 * specified, it resolves to {@syntax true}.
 * @returns {Dialog} the preloader dialog instance
 */
var mwait = function (title, show) {
    if (title === undefined || title===null) {
        title = "Working";
    }
    if (show === undefined) {
        show = true;
    }
    if (show) {
        window.mloader = app.dialog.preloader(title);
    } else if (window.mloader !== null) {
        window.mloader.close(true);
    }
    return window.mloader;
};



/**
 * Shows an error dialog with title: Error
 * 
 * @param {string} msg message body
 * @returns {Dialog} the dialog instance
 */
var merror = function (msg) {
    return app.dialog.alert(msg, "Error");
};

/**
 * Shows an alert dialog with title: Notice
 * 
 * @param {string} msg message body
 * @returns {Dialog} the dialog instance
 */
var malert = function (msg) {
    return app.dialog.alert(msg, "Notice");
};



/**
 * Logs the user out by removing all user-related information from the local
 * storage. The user is also redirected to login page.
 * @param {type} ev
 */
var logout = function (ev) {
    ev.preventDefault();
    removeData();
    router.navigate({name: "login"});
};


/**
 * Adds a new key value pair to the local storage. If the key already exists,
 * its value if updated.
 * 
 * @param {string} key
 * @param {Object} val the value
 */
var setData = function (key, val) {
    localStorage.setItem(key, val);
};

/**
 * Retrieves a value of a given key from local storage. Call to this function
 * works exactly like <code>localStorage.getItem(key)</code>.
 * 
 * @param {String} key the key for which value to get. Most of these keys are
 * defined in here.
 * @returns {DOMString}
 */
var getData = function (key) {
    return localStorage.getItem(key);
};

/**
 * Removes a specified key from the local storage. This removes the key and its
 * value. When <code>key</code> is <code>undefined</code>, all local storage
 * items are removed
 * 
 * @param {string} key the key to remove
 */
var removeData = function (key) {
    if (key === undefined) {
        localStorage.clear();
    } else {
        localStorage.removeItem(key);
    }
};

/**
 * Creates an absolute URL from the given URL portion, being a file name or
 * merely a URL part
 * 
 * @param {String} page
 * @returns {String} the URL
 */
function getURL(page) {
    if (page === undefined) {
        page = "";
    }
    //return "http://triosiu.myself.co.ls/" + page;
    return "http://localhost/trio/" + page;
}
;

/**
 * Searches for a group using group code.
 * 
 * @param {String} code the group code
 * @returns {findGroup.grups|Array|Object} the JSON object representing the group
 * information
 */
var findGroup = function (code) {
    var grups = JSON.parse(getData(window.groups));
    for (i = 0; i < grups.length; i++) {
        if (grups[i].code === code) {
            return grups[i];
        }
    }
};

/**
 * Loads a specific page specified in <code>page</code>. Pages are specified as
 * set up in app initialization
 * 
 * @param {type} page the page to load. if <code>undefined</code>, login page is
 * loaded
 */
var getPage = function (page) {
    if (page === undefined) {
        app.router.navigate("/");
    } else {
        app.router.navigate(page);
    }
};

/**
 * Creates action sheet for pages that require it. This particular action sheet
 * shows user-related information, such as namesm, user name, group load (if 
 * any), etc. It also contains interactive components such as the settings
 * button, logout button, etc
 * 
 * @type Object
 */
var userSettings = function (el) {
    var grup = getData(window.currentGroup);
    var cgroup = {name: "", code: "", position: ""};
    if ((grup !== null) && (grup !== undefined)) {
        cgroup = JSON.parse(grup);
    }

    var userSettings = app.actions.create({
        buttons: [
            {
                text: getData(window.names) + " - " + getData(window.username),
                color: "color-blue"
            },
            {
                text: cgroup.code + " | " + cgroup.name + " - " + cgroup.position,
                color: "color-blue"
            },
            {
                text: 'Change Password',
                bold: true,
                color: "color-blue"
            },
            {
                text: 'Settings',
                bold: true,
                color: "color-blue"
            },
            {
                text: 'Logout',
                color: "#f00",
                onClick: function (e) {
                    app.router.navigate("/");
                    removeData();
                }
            }
        ]
    });
    $(document).on("click","#user-sets",function(e){
        e.preventDefault();
        userSettings.open();
    });
    /*
    $(el.el).find("#user-sets").on("click", function (e) {
        e.preventDefault();
        userSettings.open();
    });
    //*/
};

var userNotifications = function () {
    console.log("populate user notifications.");
    console.log(getData(window.notes));
    $("#note-notes").html(getData(window.notes));
    $("#note-counter").text(getData(window.notesUnread));
    $("#user-names").text(getData(window.names));
};

var currentUser = function () {
    //var info = 
    var data = {
        username: getData("username"),
        token: getData("token"),
        //will add other information later
        cgroup: getData("cgroup")
    };
    return data;
};

var title = function (t) {
    /*
    if (t === undefined) {
        t = "Sesiu";
    }
    $(".title").text(t);
    //*/
};

var menuIcon = function (home) {
    /*
    var html = "<a href=\"#\" id=\"menu-top\" class=\"link icon-only panel-open\" data-panel=\"left\"><i class=\"la la-bars\"></i></a>";
    if (!home || home === undefined) {
        html = "<a href=\"#\" class=\"back icon-only\"><i class=\"icon icon-back\"></i></a>";
    }
    $(".left").html(html);
    //*/
};